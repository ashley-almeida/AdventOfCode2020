using System;
using System.Linq;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Collections;

public class Day11
{
    int placements = 0;
    public void DoStuffPartOne()
    {
        string inputString

        string sampleString = "L.LL.LL.LL,LLLLLLL.LL,L.L.L..L..,LLLL.LL.LL,L.LL.LL.LL,L.LLLLL.LL,..L.L.....,LLLLLLLLLL,L.LLLLLL.L,L.LLLLL.LL"; //"28,33,18,42,31,14,46,20,48,47,24,23,49,45,19,38,39,11,1,32,25,35,8,17,7,9,4,2,34,10,3";

        var inputs = inputString.Split(',').ToList();

        char[,] seatMap = new char[inputs.Count, inputs[0].Length];

        for (int row = 0; row < inputs.Count; row++)
        {
            var seats = inputs[row].ToCharArray();
            for (int seat = 0; seat < seats.Length; seat++)
            {
                seatMap[row, seat] = seats[seat];
            }
        }

        var FinalSeats = this.DoSeating(seatMap);



        var seatCounter = 0;
        Console.WriteLine("final: ");
        for (int row = 0; row < FinalSeats.GetLength(0); row++)
        {
            for (int seat = 0; seat < FinalSeats.GetLength(1); seat++)
            {
                if (FinalSeats[row, seat] == '#') seatCounter++;
            }
        }
    }

    char[,] DoSeating(char[,] seatMap)
    {
        var tempSeatMap = seatMap.Clone() as char[,];

        Console.WriteLine($"------------------- {placements++} ");

        for (int row = 0; row < seatMap.GetLength(0); row++)
        {
            for (int seat = 0; seat < seatMap.GetLength(1); seat++)
            {
                switch (seatMap[row, seat])
                {
                    case 'L':
                        var seated = false;
                        for (int nRow = row - 1; nRow <= row + 1; nRow++)
                        {
                            for (int nSeat = seat - 1; nSeat <= seat + 1; nSeat++)
                            {
                                if (nSeat >= 0 && nRow >= 0 && nRow < seatMap.GetLength(0) && nSeat < seatMap.GetLength(1))
                                {
                                    if (seatMap[nRow, nSeat] == '#')
                                    {
                                        seated = true;
                                        break;
                                    }
                                }
                            }
                            if (seated) break;
                        }
                        if (!seated)
                        {
                            tempSeatMap[row, seat] = '#';
                        }
                        break;
                    case '#':
                        int taken = 0;
                        for (int nRow = row - 1; nRow <= row + 1; nRow++)
                        {
                            for (int nSeat = seat - 1; nSeat <= seat + 1; nSeat++)
                            {
                                if (nSeat >= 0 && nRow >= 0 && nRow < seatMap.GetLength(0) && nSeat < seatMap.GetLength(1))
                                {
                                    //Console.WriteLine($"{nRow},{nSeat}={seatMap[nRow, nSeat]}");
                                    if (!(nSeat == seat && nRow == row) && seatMap[nRow, nSeat] == '#')
                                    {
                                        taken++;
                                        if (taken == 4)
                                        {
                                            //Console.WriteLine($"4 taken break for {row}-{seat}");
                                            break;
                                        }

                                    }
                                }
                            }
                            if (taken == 4)
                                break;
                        }
                        if (taken == 4)
                            tempSeatMap[row, seat] = 'L';
                        break;
                }
                //Console.Write(tempSeatMap[row, seat]);
            }
            //Console.WriteLine();
        }


        if (tempSeatMap.Rank == seatMap.Rank &&
        Enumerable.Range(0, tempSeatMap.Rank).All(dimension => tempSeatMap.GetLength(dimension) == seatMap.GetLength(dimension)) &&
        tempSeatMap.Cast<char>().SequenceEqual(seatMap.Cast<char>()))
        {
        }
        else
        {
            return DoSeating(tempSeatMap);
        }
        return seatMap;
    }

    char[,] DoSeatingTwo(char[,] seatMap)
    {
        var tempSeatMap = seatMap.Clone() as char[,];

        Console.WriteLine($"------------------- {placements++} ");

        for (int row = 0; row < seatMap.GetLength(0); row++)
        {
            for (int seat = 0; seat < seatMap.GetLength(1); seat++)
            {
                switch (seatMap[row, seat])
                {
                    case 'L':
                        var seated = false;
                        for (int nRow = row - 1; nRow <= row + 1; nRow++)
                        {
                            for (int nSeat = seat - 1; nSeat <= seat + 1; nSeat++)
                            {
                                int x = nRow, y = nSeat;
                                if (nSeat == seat && nRow == row)
                                {

                                }
                                else
                                {
                                    //Console.WriteLine($"");
                                    while (y >= 0 && x >= 0 && x < seatMap.GetLength(0) && y < seatMap.GetLength(1))
                                    {
                                        // if (row == 0)
                                        //     Console.WriteLine($"Checking for {row},{seat}={seatMap[row, seat]} === {x}-{y} which is {seatMap[x, y]}");
                                        if (seatMap[x, y] == '#')
                                        {
                                            seated = true;
                                            break;
                                        }
                                        else if (seatMap[x, y] == 'L')
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            if (x < row) x--;
                                            if (y < seat) y--;
                                            if (x > row) x++;
                                            if (y > seat) y++;
                                        }
                                    }
                                }
                                if (seated) break;
                            }
                            if (seated) break;
                        }
                        if (!seated)
                        {
                            tempSeatMap[row, seat] = '#';
                        }
                        // var seated = false;
                        // for (int nRow = row - 1; nRow <= row + 1; nRow++)
                        // {
                        //     for (int nSeat = seat - 1; nSeat <= seat + 1; nSeat++)
                        //     {
                        //         if (nSeat >= 0 && nRow >= 0 && nRow < seatMap.GetLength(0) && nSeat < seatMap.GetLength(1))
                        //         {
                        //             if (seatMap[nRow, nSeat] == '#')
                        //             {
                        //                 seated = true;
                        //                 break;
                        //             }
                        //         }
                        //     }
                        //     if (seated) break;
                        // }
                        // if (!seated)
                        // {
                        //     tempSeatMap[row, seat] = '#';
                        // }

                        break;
                    case '#':
                        int taken = 0;
                        for (int nRow = row - 1; nRow <= row + 1; nRow++)
                        {
                            for (int nSeat = seat - 1; nSeat <= seat + 1; nSeat++)
                            {
                                int x = nRow, y = nSeat;
                                if (nSeat == seat && nRow == row)
                                {

                                }
                                else
                                {
                                    //Console.WriteLine($"");
                                    while (y >= 0 && x >= 0 && x < seatMap.GetLength(0) && y < seatMap.GetLength(1))
                                    {
                                        //Console.WriteLine($"Checking for {row},{seat}={seatMap[row, seat]} === {x}-{y} which is {seatMap[x, y]}");
                                        if (seatMap[x, y] == '#')
                                        {
                                            taken++;
                                            break;
                                        }
                                        else if (seatMap[x, y] == 'L')
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            if (x < row) x--;
                                            if (y < seat) y--;
                                            if (x > row) x++;
                                            if (y > seat) y++;
                                        }
                                    }
                                }

                                if (taken == 5)
                                    break;
                            }
                            if (taken == 5)
                                break;
                        }
                        if (taken == 5)
                            tempSeatMap[row, seat] = 'L';
                        break;
                }
                //Console.Write(tempSeatMap[row, seat]);
            }
            //Console.WriteLine();
        }

        // if (placements == 3)
        //     return tempSeatMap;

        if (tempSeatMap.Rank == seatMap.Rank &&
        Enumerable.Range(0, tempSeatMap.Rank).All(dimension => tempSeatMap.GetLength(dimension) == seatMap.GetLength(dimension)) &&
        tempSeatMap.Cast<char>().SequenceEqual(seatMap.Cast<char>()))
        {

        }
        else
        {
            // for (int row = 0; row < tempSeatMap.GetLength(0); row++)
            // {
            //     for (int seat = 0; seat < tempSeatMap.GetLength(1); seat++)
            //     {
            //         Console.Write(tempSeatMap[row, seat]);
            //     }
            //     Console.WriteLine();
            // }
            return DoSeatingTwo(tempSeatMap);
        }
        return seatMap;
    }
    public void DoStuffPartTwo()
    {
        string inputString

        string sampleString = "L.LL.LL.LL,LLLLLLL.LL,L.L.L..L..,LLLL.LL.LL,L.LL.LL.LL,L.LLLLL.LL,..L.L.....,LLLLLLLLLL,L.LLLLLL.L,L.LLLLL.LL"; //"28,33,18,42,31,14,46,20,48,47,24,23,49,45,19,38,39,11,1,32,25,35,8,17,7,9,4,2,34,10,3";

        var inputs = inputString.Split(',').ToList();

        char[,] seatMap = new char[inputs.Count, inputs[0].Length];

        for (int row = 0; row < inputs.Count; row++)
        {
            var seats = inputs[row].ToCharArray();
            for (int seat = 0; seat < seats.Length; seat++)
            {
                seatMap[row, seat] = seats[seat];
            }
        }

        var FinalSeats = this.DoSeatingTwo(seatMap);

        var seatCounter = 0;
        Console.WriteLine("final: ");
        for (int row = 0; row < FinalSeats.GetLength(0); row++)
        {
            for (int seat = 0; seat < FinalSeats.GetLength(1); seat++)
            {
                Console.Write(FinalSeats[row, seat]);
                if (FinalSeats[row, seat] == '#') seatCounter++;
            }
            Console.WriteLine();
        }

        Console.WriteLine(seatCounter);
    }
}
